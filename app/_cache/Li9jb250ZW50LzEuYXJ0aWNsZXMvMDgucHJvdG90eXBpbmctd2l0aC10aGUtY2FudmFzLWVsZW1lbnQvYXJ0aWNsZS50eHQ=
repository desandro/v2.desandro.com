 <!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Prototyping with the canvas&nbsp;element &middot;  David DeSandro</title>
    <link rel="stylesheet" href="../../_base/css/desandro.css" type="text/css" media="screen" />
    <!--[if lte IE 7]><script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
    <script type="text/javascript" src="http://use.typekit.com/bqa1ehi.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
    <script type="text/javascript" src="../../_base/js/jquery-1.4.min.js"></script>
    <!-- <script type="text/javascript" src="_base/js/application.js"></script> -->
    <script src="/mint/?js" type="text/javascript"></script>



            <link rel="stylesheet" href="../../content/1.articles/08.prototyping-with-the-canvas-element/prototyping_canvas.css" type="text/css" media="screen" />
    


            <script type="text/javascript" src="../../content/1.articles/08.prototyping-with-the-canvas-element/prototyping_canvas.js" charset="utf-8"></script>
    


    <link rel="stylesheet" href="../../_base/css/v1.css" type="text/css" media="screen" />


</head>
<body class="articles">
 <section id="site_header" class="tk_proxima_nova">
    <div id="branding">
        <p><a href="../../"><span>David</span> DeSandro</a>  / </p>
    </div>
    <ol>
        <li class="articles"><a href="../../articles">Articles</a>
                            / <em><a href="../../articles/prototyping-with-the-canvas-element/">Prototyping with the canvas&nbsp;element</a></em>
<time>23 Apr 2009</time>
<nav class="older_newer">
                <a href="../../articles/do-make-create/" title="Do make create">&lsaquo; Older</a>


    
                <a href="../../articles/why-art/" title="Why Art?">Newer &rsaquo; </a>


    
</nav>
    
            
        </li>
        <li class="resources"><a href="../../resources">Resources</a>
            
        </li>
        <li class="portfolio"><a href="../../portfolio">Portfolio</a>
            
        </li>
        <li class="about"><a href="../../about">About &amp; Contact</a></li>
    </ol>    
</section>

<section id="content">

    <div class="wrap12">

	<h1 class="col12">Prototyping with the canvas&nbsp;element</h1>

<div class="col6 space2left">
	<p class="deck">Since the beginning of 2009, HTML5 has become the hot topic in the web design community.  <a href="http://search.twitter.com/search?q=html5">Everyone is excited</a> to try out the new elements and join in the fun.  While I too am interested in playing with <code>section</code>s and <code>aside</code>s, I'm a bit disappointed that the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html">new canvas element</a> hasn't been more prominent in all of the HTML5 hullabaloo.</p>

	<aside class="caption col3 pull4right">
		I won't go into the details of how and why the canvas element works.  For that, I recommend reading <a href="https://developer.mozilla.org/en/Canvas_tutorial">Mozilla Developer Center's Canvas tutorial.</a>
	</aside>
	
	<p>In brief, the canvas element enables designers to create images using programming and geometry. I realize this might not be a big deal to a good amount of designers out there.  If you live in a world of Photoshop, Illustrator, and all around GUI, you might think its completely backwards to create something visual through pure code.  For example, take <a href="http://www.position-absolute.com/blog/web-experience/are-we-there-yet/">Cedric Dugas:</a></p>

	<blockquote class="slab">
		<p>The canvas tag was created in a response to those who wanted pixel drawing in html. It feels like Flash 5 without any graphic UI. Seriously I gave it a try, Unless you are really good in mathematic formulas, don't expect to do great things on it. Most front-end developers are not well versed in mathematic programmings, which means we'll probably never use this thing as it's too complex to work with, or will only use a plug-in.</p>
	</blockquote>


	<p>I can sympathize with Cedric here.  When you are solely a web designer who doesn't have to dabble in development, you are conditioned to rely on GUI.  Most of your day is spent pointing and clicking, selecting options, arranging layers, and navigating through multiple levels of dialog boxes.  So I understand the repulsion to a tool that can only be manipulated via code and scripting.</p>

	<p>But I doubt that most designers are only 'visual' creators, shackled to GUI.  More often, a web designer's skill-set extends through a decent amount of front-end development.  Chances are, if you ever wrote a couple lines of JavaScript, then you can get your head around using the canvas.  If not, the canvas element might be an ideal place to get your feet wet with programming.  The results are purely visual, so you have immediate feedback on whether or not your code is working.</p>

	<p>Currently, I think most designers view the canvas element as either for weird, experimental designs, or boring pie charts and bar graphs.  But I've been using the canvas in a much more practical manner &mdash; to generate simple UI graphics.</p>		

	<p>As I see it, using the canvas element in this manner has several clear advantages over traditional GUI applications like Illustrator or Photoshop:</p>


</div> <!-- /col6 -->

<div class="wrap12" id="reasons">

	<div class="col4">
		
		<p> <span class="num slab">1</span> <strong>Pixel-perfect rendering:</strong>   When I'm creating a simple small icon, I have a real tough time making sure there is no anti-aliasing.  Aligning shapes and lines to the pixel is like picking up grains of sand with chopsticks.  It feels very clumsy to be placing shapes and anchor points specific to the pixel.  And there's also the whole issue of dealing with cropping. But relying on the script for the canvas, there's some confidence gained in the code.</p>
		<p> <span class="num slab">2</span> <strong>Image output:</strong> To extract a PNG from the canvas element, just right click on the canvas and view the image. Skip over exporting and file management.</p>

		
	</div> <!-- /.col4 -->
	<div class="col4">

		<p> <span class="num slab">3</span> <strong>One less app:</strong>  Opening up Photoshop just get a new gradient is such a drag.  Using the canvas element means you only have worry about another text file.  And if you're using the <a href="http://desandro.com/resources/quickie-canvas">Quickie Canvas,</a> then you only have to worry about another browser tab.</p>					

		<p> <span class="num slab">4</span> <strong>Text accessibility:</strong>  GUI is great because all the attributes you see are represented within some other panel or dialog box.  But navigating through all these boxes can be a chore.  Especially if you're making slight changes.  Using scripts for a canvas element eliminates all that chrome, so you can easily identify and change specific attributes and values.</p>

	</div> <!-- /.col4 -->
	<div class="col4">

		<p> <span class="num slab">5</span> <strong>Data URI:</strong> This is a game changer.  The canvas element outputs data URI. So when you view just the image, you'll see the raw data in the address URL field (Firefox 3 only, <a href="#c000037">Thx Shwetank</a>).   The next step is to take that URI and plug it right into CSS.  You just skipped right over any sort of file management.  The downside is that the data URI could be extremely long, and it looks really messy sitting inside the stylesheet.  But this practice makes for very quick prototyping.  For the past year there has been plenty <a href="http://www.google.com/search?&amp;q=37signals photoshop">a-clamoring about skipping comps in Photoshop and jumping in with HTML and CSS.</a>  Using Data URI images fits right into this methodology. </p>
		

	</div> <!-- /.col4 -->

</div> <!-- /.wrap8.pull2left -->

<div class="col6 space2left">		
	
	<p>On top of those reasons, you now have at your disposal all the
		advantageous of generative art.  Move over <a href="http://www.joshuadavis.com/">Joshua Davis.</a>

	</p><p>With all these advantages in mind, I developed the <a href="http://desandro.com/resources/quickie-canvas">Quickie Canvas.</a> It's a simple web app that uses jQuery to generate canvas elements, basically skipping over all the HTML muck to get one to render on the page.  Any time I need a gradient, drop shadow, button, or shape, I just load up another tab in Firefox and get coding.  As proof of my method, I'm providing the code to all the images used on this site.</p>	

	<h2>Examples</h2>

	<p class="caption">I am still working out all the kinks with some of these examples.  All of them were originally rendered in Firefox 3.  I've discovered several discrepancies between it and Safari/Opera.  If you're using IE,  I'm sorry to say I couldn't get excanvas working properly.</p>

	<h3>Drop shadow</h3>

	<canvas height="20" width="20" id="drop-cnvs"></canvas>
	

	<div class="col4 pull4right" id="drop-ex">
		<p>Maybe this is just my fault as a feeble designer,
		but trying to get Illustrator to export a drop shadow like the one shown
		here is especially difficult.</p>
	</div>

	<pre><code>var grad = ctx.createLinearGradient(0,0,0,h);
grad.addColorStop(0, 'rgba(0,0,0,.15)');
grad.addColorStop(.3, 'rgba(0,0,0,.05)');
grad.addColorStop(1, 'rgba(0,0,0,.0)');
ctx.fillStyle = grad;
ctx.fillRect( 0, 0, w, h);</code></pre>	


	<h3>Navigation Gradients</h3>


	<p>Shown at 940 x 196, but was actually rendered at 1440 x 300.</p>
	
	<canvas height="195" width="960" class="pull2left" id="grads-cnvs"></canvas>
	
	<pre><code>var s = w/6;

var colors = new Array("#F8A","#3D8","#EB2",
                    "#8AF", "#C66", "#C4C" );

for ( i=0; i&lt;=5; i++) {
  grad(i*s, colors[i]);
}

function grad( x, color) {
  ctx.fillStyle = color;
  ctx.fillRect( x, 0, s, h);
}

var lingrad = ctx.createLinearGradient(0,0,0,h);
  lingrad.addColorStop( 0/h, 'rgba(255,255,255,1)');
  lingrad.addColorStop( .73, 'rgba(255,255,255,0)');
  lingrad.addColorStop( .87, 'rgba(0,0,0,0)' );
  lingrad.addColorStop( 1, 'rgba(0,0,0,.1)' );

ctx.fillStyle = lingrad;
ctx.fillRect( 0, 0, w, h);</code></pre>	

	<h3>D Favicon</h3>
	
	<canvas height="16" width="16" id="fav-cnvs"></canvas>
	
	<pre><code>var grad = ctx.createLinearGradient(0,0,0,h);
grad.addColorStop(0, '#E79');
grad.addColorStop(1, '#B46');
ctx.fillStyle = grad;

ctx.beginPath();
  ctx.lineTo(1,1);
  ctx.lineTo(8,1);
  ctx.arc(8, 8, 7, -Math.PI/2, Math.PI/2, false);
  ctx.lineTo(1,15);
  ctx.lineTo(1,11);
  ctx.lineTo(3,11);
  ctx.lineTo(3,4);
  ctx.lineTo(7,4);
  ctx.lineTo(7,11);
  ctx.arc(8, 8, 3, Math.PI/2, -Math.PI/2, true);
  ctx.lineTo(1,5);
  ctx.fill();
ctx.closePath();</code></pre>
		
	<h3>Diagonal Stripes</h3>

	<div class="col4 pull4right" id="diag-ex">
		<p>For the repeating background image seen here.
		This examples was rendered at 20 x 20, but the height and width
		values can be manipulated to produce different angles and sizes.</p>		
	</div>		
	
	<canvas height="20" width="20" id="diag-cnvs"></canvas>

	<pre><code>var color1 = 'rgba(255,0,0,1)';
var color2 = 'rgba(255,0,0,.2)';

ctx.fillStyle = color2;
ctx.fillRect( 0, 0, w, h);

ctx.fillStyle = color1;
  ctx.lineTo( w/2, 0);
  ctx.lineTo( 0, h/2);
  ctx.lineTo( 0, 0);
  ctx.moveTo( w, 0);
  ctx.lineTo( w, h/2);
  ctx.lineTo( w/2, h);
  ctx.lineTo( 0, h);
  ctx.fill();
ctx.closePath();</code></pre>


	<h3>Grain</h3>


	<div class="col4 pull4right" id="grain-ex">
		<p>Be careful with this one.  The formula runs for every pixel, so it can get
		crash your browser at resolutions greater than 300 x 300</p>
	</div>				
	
	<canvas height="100" width="100" id="grain-cnvs"></canvas>

	<pre><code>for ( ih=0; ih &lt; h; ih++) {
  for ( iw=0; iw&lt;w; iw++ ) {
    var alpha = Math.random()*.07+.04;
    ctx.fillStyle = 'rgba(0,0,0,'+ alpha + ')';
    ctx.fillRect( iw, ih, 1, 1);
  }
}</code></pre>

	<h3>RSS icon</h3>
	
	
	<canvas height="14" width="14" id="rss-cnvs"></canvas>
	
	<pre><code>// orange gradient
var grad = ctx.createLinearGradient(0,0,w,h);
grad.addColorStop(0, '#D80');
grad.addColorStop(.5, '#FA3');
grad.addColorStop(1, '#D80');

// orange background w/ gradient
var r = 2.5; // corner radius
ctx.fillStyle = grad;
ctx.beginPath();
  ctx.arc( r,     r, r, Math.PI, Math.PI*(3/2),false);
  ctx.arc( w-r,   r, r, Math.PI*(3/2), 0,false);
  ctx.arc( w-r, h-r, r, 0, Math.PI*(1/2),false);
  ctx.arc( r,   h-r, r, Math.PI*(1/2), Math.PI,false);
  ctx.fill();
ctx.closePath();

// circle bottom left
ctx.fillStyle = "#FFF";
ctx.beginPath();
  ctx.arc( 3.5, 10.5, 1.5, 0, Math.PI*2, true);
  ctx.fill();
ctx.closePath();

// quarter circle lines
ctx.strokeStyle = "#FFF";
ctx.lineWidth = 2;
ctx.beginPath();
  ctx.arc( 2, 12, 6, 0, -(Math.PI/2), true);
  ctx.stroke();
ctx.closePath();

ctx.beginPath();
  ctx.arc( 2, 12, 9.5, 0, -(Math.PI/2), true); 
  ctx.stroke();
ctx.closePath();</code></pre>

	<h3>Previous/Next links</h3>

	<p>I was also able to swivel the arrows around for the up/down links for <a href="http://desandro.com">my portfolio.</a></p>
	
	<canvas height="140" width="20" id="arrows-cnvs"></canvas>

	<pre><code>function arrow(s, x, y, angle, color) {
  ctx.save();
  ctx.translate(x,y);
  ctx.translate(s*1,s*2);
  ctx.rotate(angle);
  ctx.translate(s*-1,s*-2);
  ctx.beginPath();
  ctx.fillStyle = color;
  ctx.lineTo(s*1.8,s*0);
  ctx.lineTo(s*.8,s*2);
  ctx.lineTo(s*1.8,s*4);
  ctx.lineTo(s*1,s*4);
  ctx.lineTo(s*0,s*2);
  ctx.lineTo(s*1,s*0);
  ctx.fill();
  ctx.closePath();
  ctx.restore();
} 	

var r = 5;
arrow(r, r*0, 0, Math.PI*0, "rgba(0,0,0,.2)");
arrow(r, r*1.2, 0, Math.PI*0, "rgba(0,0,0,.2)");
arrow(r, r*0, 40, Math.PI*0, "rgba(0,0,0,.6)");
arrow(r, r*1.2, 40, Math.PI*0, "rgba(0,0,0,.6)");

arrow(r, r*0, 80, Math.PI*1, "rgba(0,0,0,.2)");
arrow(r, r*1.2, 80, Math.PI*1, "rgba(0,0,0,.2)");
arrow(r, r*0, 120, Math.PI*1, "rgba(0,0,0,.6)");
arrow(r, r*1.2, 120, Math.PI*1, "rgba(0,0,0,.6)");</code></pre>



	<h3>This article's background</h3>

	<p>In this example I did 800 iterations, but the image I used
		has 4800 iterations.</p>
	
	
	<canvas height="600" width="780" id="boxes-cnvs"></canvas>

	
	<pre><code>var color1 = 'hsla(330,30%,92%,1)';
var color2 = 'hsla(0,0%,100%,1)';
ctx.fillStyle = color1;
ctx.lineWidth = 1;
ctx.strokeStyle = color2;

for ( i=0; i&lt;=800; i++ ) {
  //randomize values for placement and size
  var x = Math.random()*w;
  var y = Math.random()*(Math.random()*.75+.25)*h*.9;
  var s = 5+Math.random()*Math.random()*Math.random()*100;
  var theta = Math.random()*3.14;

  // render boxes on the left
  ctx.save();
    var x1 = x-w/2;
    ctx.translate( x1, y);
    ctx.rotate(theta);
    ctx.translate(-s/2, -s/2);
    ctx.fillRect(0,0,s,s);
    ctx.strokeRect(0,0,s,s);
  ctx.restore();

  // render the same boxes on the right, so it repeats
  ctx.save();
    var x2 = x+w/2;
    ctx.translate( x2, y);
    ctx.rotate(theta);
    ctx.translate(-s/2, -s/2);
    ctx.fillRect(0,0,s,s);
    ctx.strokeRect(0,0,s,s);
  ctx.restore();
}</code></pre>


</div> <!-- /col6 -->		


	</div>
    
</section>
     <section id="site_footer" class="tk_proxima_nova">
        <div class="wrap12">
            <div class="made_this col4">
                <p class="who_did">
                    <span class="david">David</span>
                    <span class="desandro">DeSandro</span>
                    made this.
                </p>
                <p class="copyright">&copy; 2009 &ndash; 2010</p>                
            </div>

            <p class="where_what col4">
                <span class="heisa">He is a graphic &amp;</span>
                <span class="designer">web designer</span>
                <span class="living">living in Arlington, VA,</span>
                <span class="working">working at <a href="http://nclud.com">nclud</a> in Washington, DC.</span>
                <span class="happy">Being creative and making stuff keeps him happy.</span>
            </p>
            <div class="also_made col4">
                <h3>Dave also made</h3>
                <ul>
                    <li class="jqmsnry"><a href="../../resources/jquery-masonry/">jQuery Masonry</a></li>
                    <li class="curtis"><a href="../../resources/curtis-css-typeface/">Curtis CSS Typeface</a></li>
                    <li class="speechbub"><a href="../../resources/css-speech-bubble-icon/">CSS Speech Bubble</a></li>
                </ul>
            </div>
        </div>
    </section> <!-- #site_footer -->
</body>
</html>

<!-- Stacey(2.0): 70d2cd05e2d31c31b265f23af3bd0168 -->